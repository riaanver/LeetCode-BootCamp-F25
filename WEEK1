#include <iostream>
#include <vector>

using namespace std;

// Problem 1 (LeetCode 167)

class Solution1 {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        int left = 0;
        int right = numbers.size() - 1;

        while (left < right) {
            int sum = numbers[left] + numbers[right];

            if (sum == target) {
                return {left+1, right+1};
            }
            else if (sum < target) {
                left++;
            }
            else {
                right--;
            }
        }
        return {};
    }
};

class Solution2 {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        vector<int> answer(nums.size(), 1);
        int leftProduct = 1;
        int rightProduct = 1;

        for (int i = 0; i<nums.size(); i++) {
            answer[i] = leftProduct;
            leftProduct *= nums[i];
        }

        for (int i = nums.size()-1; i>=0; i--) {
            answer[i] *= rightProduct;
            rightProduct *= nums[i];
        }

        return answer;
    }
};

class Solution3 {
public:
    void sortColors(vector<int>& nums) {
        int low = 0;
        int high = nums.size() - 1;
        int left = 0;
        while (left <= high) {
            if (nums[left] == 0) {
                swap(nums[low], nums[left]);
                low++;
                left++;
            }

            else{
                if (nums[left] == 2) {
                swap(nums[high], nums[left]);
                high--;
                }
                else{
                left++;
                }
            }
        }
    }
};



int main() {
    // adding some sample test cases here

    // Problem 1

    Solution1 sol1;
    vector<int> nums1 = {2,7,11,15};
    int targ = 9;
    vector<int> result1 = sol1.twoSum(nums1, targ);

    cout << "[" << result1[0] << ", " << result1[1] << "]" << endl;

    // Problem 2

    Solution2 sol2;
    vector<int> nums2 = {-1,1,0,-3,3};
    vector<int> result2 = sol2.productExceptSelf(nums2);

    cout << "[";
    for (int i = 0; i < result2.size(); i++) {
        cout << result2[i] << " ";
    }
    cout << "]" << endl;

    // Problem 3

    Solution3 sol;
    vector<int> nums3 = {2,0,2,1,1,0};
    cout << "Original: ";
    for (int i : nums3) cout << i << " ";
    cout << endl;

    sol.sortColors(nums3);

    cout << "Sorted:  ";
    for (int j : nums3) cout << j << " ";
    cout << endl;

    return 0;
}